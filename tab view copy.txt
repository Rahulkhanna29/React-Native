/* eslint-disable react-hooks/exhaustive-deps */
import { View, useWindowDimensions, Text } from 'react-native';

/* eslint-disable react-hooks/exhaustive-deps */
import React, { useState, useEffect, useCallback,useRef } from 'react';
import {   Image, FlatList, TouchableOpacity } from 'react-native';
import { TabView, SceneMap } from 'react-native-tab-view';
import styles from '../StyleSheet';

import { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';

import { useSelector,useDispatch } from 'react-redux';


const TestBro=()=>{

    const {coins} = useSelector(state => state.userReducer);

 
    useEffect(() => {
    
        UseMe();
     
         
   
       },[]);
   
       const [top, settop] = useState('');
       const theArray = [{key:'Wishlist',title:'Wishlist',NewData1:'Wishlist'}];
      //  const theArray = [];

        const UseMe=()=>{
           for (let index = 0; index <  Object.keys(coins["data"]).length; index++) {

               const theArray = {
              title:  Object.keys(coins["data"])[index],
              key: Object.keys(coins["data"])[index],
        //       NewData:coins.tickers,
            NewData1:coins["data"],

         }
        
       
              //  theArray.push(newItem);
             
               
             
           }
          //  settop(theArray);
        }
   



var newItem1;
const upperarray=[];
// const upperarray=[];
  const khanna= Object.keys(coins["data"]);

  for (let hi = 0; hi <  Object.keys(coins["data"]).length; hi++) {
    if(hi==2){
      newItem1 = {
        [khanna[hi]] :myFunction
       
           };
       
    }
     
}
  console.log(newItem1)
// const rahul =upperarray.reduce(function(result, current) {
//     return Object.assign(result, current);
//   }, {});

const myFunction = () => (
  <View style={{ flex: 1, backgroundColor: '#673ab7' }} />
);



// var obj = {
//  id: "21", width: "100", height: "100", name: "image1"

// };

// var res = {};

// Object.keys(obj).forEach(temp => {
//     res[temp] = !isNaN(obj[temp])
//       ? parseInt(obj[temp], 10)
//       : obj[temp];
//   return res;

//   });



const renderScene = SceneMap(
 newItem1

);




  const layout = useWindowDimensions();


  const [index, setIndex] = React.useState(0);
  const [routes] = React.useState(theArray);
// console.log(routes)
// upperarray.push(routes)
// console.log(upperarray)
  return (
   
    <TabView
      navigationState={{ index, routes }}
      renderScene={renderScene}
      onIndexChange={setIndex}
      initialLayout={{ width: 0 }}
    />
  );
}
export default TestBro;